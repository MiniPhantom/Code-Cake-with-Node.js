<div class="container">
    <div class="row py-5 mt-5">
        <div class="col-xl-8 col-md-8 ">
            <h2>let's <span>Make it Easy</span> </h2>
            <textarea id="code-screen">{{content}}</textarea>
        </div>
        <div class="col-xl-4 col-md-4 mt-2">




            <div class="card">

                {{!-- Video Call --}}
                <div id="video-container">
                    <video autoplay id="second-video"></video>
                    <video autoplay id="my-video"></video>
                    <div id="step2">
                        <p>Your ID: <span id="my-id">...</span></p>
                        <div class="form-inline">
                            <input type="text" class="form-control" placeholder="Call user ID..." id="callto-id">
                            <a href="#" class="btn btn-sm btn-success" id="make-call">Call</a>
                        </div>
                    </div>
                    <div id="step3">
                        <p>Talk to: <span id="second-id">...</span></p>
                        <a href="#" class="btn btn-sm btn-danger" id="end-call">End Call</a>
                    </div>
                </div>

                {{!-- Chat Room --}}
                <div class="card-header">
                    <span id="chatbox-username">
                        {{#if user}}
                        {{user.name}}
                        {{/if}}
                    </span>
                </div>
                <div class="card-body">
                    <ul class="media-list" style="height: 100px; overflow-y: scroll" id="chatbox-listMessages">

                    </ul>

                </div>
                <div class="card-footer">
                    <div class="input-group">

                        <input type="text" id="userMessage" class="form-control" placeholder="Enter message" />

                        <span class="input-group-btn">
                            <button type="button" class="button button-contactForm btn_5"
                                onclick="sendMessage()">SEND</button>
                        </span>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



<input type="hidden" value="{{roomId}}" id="roomId">

<!-- jquery -->
<script src="/javascripts/jquery-1.12.1.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.2/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.2/mode/javascript/javascript.min.js"></script>

<script src="/plugins/ot/ot.js"></script>
<script src="/socket.io/socket.io.js"></script>

<script src="https://code-cake.herokuapp.com/peer/peer.js"></script>

<script>
    var EditorClient = ot.EditorClient;
    var SocketIOAdapter = ot.SocketIOAdapter;
    var CodeMirrorAdapter = ot.CodeMirrorAdapter;

    var socket = io.connect();

    var editor = CodeMirror.fromTextArea(document.getElementById("code-screen"), {
        lineNumbers: true,
        theme: "monokai"
    });


    var code = $('#code-screen').val();
    var cmClient;
    function init(str, revision, clients, serverAdapter) {
        if (!code) {
            editor.setValue(str);
        }

        cmClient = window.cmClient = new EditorClient(
            revision, clients, serverAdapter, new CodeMirrorAdapter(editor)
        );
    };

    socket.on('doc', function (obj) {
        init(obj.str, obj.revision, obj.clients, new SocketIOAdapter(socket));
    })

    var username = $('#chatbox-username').val();

    if (username === "") {
        var userId = Math.floor(Math.random() * 9999).toString();
        username = "User" + userId;
        $("#chatbox-username").text(username);
    };

    var roomId = $("#roomId").val();
    socket.emit('joinRoom', { room: roomId, username: username });

    var userMessage = function (name, message) {
        return ('<li class="media"> <div class="media-body" > ' +
            '<b>' + name + '</b> ' + '<div class="p-3 mb-2 bg-secondary text-white rounded">' + message +
            '</div></div></li>'
        );
    };

    var sendMessage = function () {
        var userMessage = $('#userMessage').val();

        if (userMessage === '') return null;

        socket.emit('chatMessage', { message: userMessage, username: username });
        $('#userMessage').val("");
    };

    socket.on('chatMessage', function (data) {
        $('#chatbox-listMessages').append(userMessage(data.username, data.message));

        console.log(data.message);
    });



    // PeerJS
    // Compatibility shim
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
    // PeerJS object
    var peer = new Peer(username + roomId, {
        host: 'code-cake.herokuapp.com/',
        path: '/peerjs',
        port: 443,
        secure: true,
        key: 'code4startup',
        debug: true
    });

    peer.on('open', function () {
        $('#my-id').text(peer.id);
    });

    // Receiving a call
    peer.on('call', function (call) {
        // Answer the call automatically (instead of prompting user) for demo purposes
        call.answer(window.localStream);
        step3(call);
    });

    peer.on('error', function (err) {
        alert(err.message);
        // Return to step 2 if error occurs
        step2();
    });

    // Click handlers setup
    $(function () {
        $('#make-call').click(function () {
            // Initiate a call!
            var call = peer.call($('#callto-id').val(), window.localStream);
            step3(call);
        });
        $('#end-call').click(function () {
            window.existingCall.close();
            step2();
        });
        step1();
    });
    function step1() {
        // Get audio/video stream
        navigator.getUserMedia({ audio: true, video: true }, function (stream) {
            // Set your video displays
            $('#my-video').prop('src', URL.createObjectURL(stream));
            window.localStream = stream;
            step2();
        }, function () { $('#step1-error').show(); });
    }

    function step2() {
        $('#step1, #step3').hide();
        $('#step2').show();
    }

    function step3(call) {
        // Hang up on an existing call if present
        if (window.existingCall) {
            window.existingCall.close();
        }
        // Wait for stream on the call, then set peer video display
        call.on('stream', function (stream) {
            $('#second-video').prop('src', URL.createObjectURL(stream));
        });
        // UI stuff
        window.existingCall = call;
        $('#second-id').text(call.peer);
        call.on('close', step2);
        $('#step1, #step2').hide();
        $('#step3').show();
    }


</script>